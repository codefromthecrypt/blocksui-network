---
AWSTemplateFormatVersion: '2010-09-09'

Description: ALB and ECS with Auto Scaling

Parameters:
  ContractsCid:
    Type: String
  ChainName:
    Type: String
  NetworkName:
    Type: String
  PrimitivesCid:
    Type: String
  ProviderUrl:
    Type: String
  RecoveryPhrase:
    Type: String
  Web3StorageToken:
    Type: String
  ContainerName:
    Type: String
  Image:
    Type: String
  MaxTaskCount:
    Type: String
  MinTaskCount:
    Type: String
  SecurityGroup:
    Type: String
  EFSSecurityGroup:
    Type: String
  Subnets:
    Type: String
  VpcId:
    Type: String

Resources:
  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: crcls-logs
        - Key: access_logs.s3.prefix
          Value: bui/nodes
      Name: !Sub 'BlocksUI-Network-Alb'
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: !Split [',', !Ref Subnets]
      Tags:
        - Key: Name
          Value: 'BlocksUI-Network-Alb'

  HttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: Alb
    Properties:
      HealthCheckIntervalSeconds: 300
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 60
      Name: blocksui-network
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetType: ip
      VpcId: !Ref VpcId

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HttpTargetGroup
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: DISABLED
      FileSystemTags:
        - Key: Name
          Value: blocksui-network-cache
      PerformanceMode: generalPurpose
      ThroughputMode: bursting

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Select [0, !Split [',', !Ref Subnets]]
      FileSystemId: !Ref FileSystem

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Select [1, !Split [',', !Ref Subnets]]
      FileSystemId: !Ref FileSystem

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: blocksui-network
      CapacityProviders:
        - FARGATE_SPOT
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: !Ref MinTaskCount
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  Service:
    Type: AWS::ECS::Service
    DependsOn: HttpListener
    Properties:
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: !Ref MinTaskCount
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: !Ref MinTaskCount
      EnableECSManagedTags: true
      LoadBalancers:
        - TargetGroupArn: !Ref HttpTargetGroup
          ContainerPort: 80
          ContainerName: !Ref ContainerName
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Split [',', !Ref Subnets]
      PlatformVersion: 1.4.0
      ServiceName: server
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref TaskDefinition

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Description: Execution role for ECS Task Definitions
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticfilesystem:ClientMount'
                  - 'elasticfilesystem:ClientWrite'
                  - 'elasticfilesystem:ClientRootAccess'
                Resource: '*'
          PolicyName: blocksui-network.EFSAccess
      RoleName: blocksui-network.TaskRole

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Environment:
            - Name: CONTRACTS_CID
              Value: !Ref ContractsCid
            - Name: CHAIN_NAME
              Value: !Ref ChainName
            - Name: NETWORK_NAME
              Value: !Ref NetworkName
            - Name: PRIMITIVES_CID
              Value: !Ref PrimitivesCid
            - Name: PROVIDER_URL
              Value: !Ref ProviderUrl
            - Name: RECOVERY_PHRASE
              Value: !Ref RecoveryPhrase
            - Name: WEB3STORAGE_TOKEN
              Value: !Ref Web3StorageToken
          Image: !Ref Image
          MountPoints:
            - SourceVolume: crcls-app-cache
              ContainerPath: '/cache'
              ReadOnly: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: 'blocksui-network'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub 'server/${ContainerName}'
          Name: !Ref ContainerName
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
            - ContainerPort: 4001
              Protocol: udp
      Cpu: 1024
      ExecutionRoleArn: !ImportValue crcls-EcsTaskExecutionRole-V1-Arn
      Family: crcls-app-task
      Memory: 4096
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref TaskRole
      Volumes:
        - Name: crcls-app-cache
          EFSVolumeConfiguration:
            FilesystemId: !Ref FileSystem

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      MinCapacity: !Ref MinTaskCount
      MaxCapacity: !Ref MaxTaskCount
      ResourceId: !Join
        - '/'
        - - service
          - !Ref Cluster
          - !GetAtt Service.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !ImportValue crcls-EcsAutoscalingRole-V1-Arn

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AppServerScaleUpPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join
            - '/'
            - - !GetAtt Alb.LoadBalancerFullName
              - !GetAtt HttpTargetGroup.TargetGroupFullName
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 4

Outputs:
  AlbArn:
    Value: !Ref Alb
  AlbDomain:
    Value: !GetAtt Alb.DNSName
  Cluster:
    Value: !Ref Cluster
  Service:
    Value: !Ref Service
  TaskDefinition:
    Value: !Ref TaskDefinition
