---
AWSTemplateFormatVersion: '2010-09-09'

Description: Networking

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    Public0:
      CIDR: '10.0.0.0/24'
    Public1:
      CIDR: '10.0.1.0/24'

  # This mapping accounts for the scenario when certain AZs
  # are not available to use (this differs on a per account
  # per customer basis). E.g., if the 'b' AZ is not available
  # in a specific region in one's account then updating the
  # list contained in the mapping below here will allow a
  # different AZ to be chosen.
  AZRegions:
    ap-northeast-1:
      AZs: ['a', 'b']
    ap-northeast-2:
      AZs: ['a', 'b']
    ap-south-1:
      AZs: ['a', 'b']
    ap-southeast-1:
      AZs: ['a', 'b']
    ap-southeast-2:
      AZs: ['a', 'b']
    ca-central-1:
      AZs: ['a', 'b']
    eu-central-1:
      AZs: ['a', 'b']
    eu-west-1:
      AZs: ['a', 'b']
    eu-west-2:
      AZs: ['a', 'b']
    sa-east-1:
      AZs: ['a', 'b']
    us-east-1:
      AZs: ['a', 'b']
    us-east-2:
      AZs: ['a', 'b']
    us-west-1:
      AZs: ['a', 'b']
    us-west-2:
      AZs: ['a', 'b']

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: 'Name'
          Value: BlocksUI-Node-Vpc

  PublicSubnet0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: 'VPC'
      AvailabilityZone: !Sub
        - '${AWS::Region}${AZ}'
        - AZ: !Select [0, !FindInMap ['AZRegions', !Ref 'AWS::Region', 'AZs']]
      CidrBlock: !FindInMap ['SubnetConfig', 'Public0', 'CIDR']
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: 'Name'
          Value: !Join
            - '-'
            - - BlocksUI
              - !FindInMap ['SubnetConfig', 'Public0', 'CIDR']
              - Node
              - PublicSubnet
              - !Select [0, !FindInMap ['AZRegions', !Ref 'AWS::Region', 'AZs']]

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: 'VPC'
      AvailabilityZone: !Sub
        - '${AWS::Region}${AZ}'
        - AZ: !Select [1, !FindInMap ['AZRegions', !Ref 'AWS::Region', 'AZs']]
      CidrBlock: !FindInMap ['SubnetConfig', 'Public1', 'CIDR']
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: 'Name'
          Value: !Join
            - '-'
            - - BlocksUI
              - !Select [1, !FindInMap ['AZRegions', !Ref 'AWS::Region', 'AZs']]
              - Node
              - PublicSubnet
              - !FindInMap ['SubnetConfig', 'Public1', 'CIDR']

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: BlocksUI-Node-IGW

  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: 'VPC'
      InternetGatewayId:
        Ref: 'InternetGateway'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: 'VPC'
      Tags:
        - Key: 'Name'
          Value: BlocksUI-Node-PublicRouteTable

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: 'GatewayToInternet'
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PublicSubnetRouteTableAssociation0:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref 'PublicSubnet0'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId:
        Ref: 'VPC'
      Tags:
        - Key: 'Name'
          Value: BlocksUI-Node-PublicNacl

  InboundHTTPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '0'
        To: '65535'

  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '0'
        To: '65535'

  PublicSubnetNetworkAclAssociation0:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref 'PublicSubnet0'
      NetworkAclId: !Ref 'PublicNetworkAcl'

  PublicSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      NetworkAclId: !Ref 'PublicNetworkAcl'

  ElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: 'vpc'

  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref 'PublicSubnet0'

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Node ingress
      GroupName: BlocksUI-Node-SecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Expose the HTTP protocol
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: Expose the HTTPS protocol
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: Expose the IPFS protocol
          FromPort: 4001
          ToPort: 4001
          IpProtocol: udp

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: blocksui-efs-endpoints
      GroupDescription: Access EFS endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref NodeSecurityGroup

Outputs:
  VpcId:
    Description: 'Id of VPC'
    Value: !Ref VPC
    Export:
      Name: BlocksUI-Node-VPC

  VpcCidrBlock:
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: BlocksUI-Node-Vpc-Cidr

  PublicSubnet0:
    Description: 'SubnetId of public subnet 0'
    Value: !Ref PublicSubnet0
    Export:
      Name: BlocksUI-Node-PublicSubnet0

  PublicSubnet1:
    Description: 'SubnetId of public subnet 1'
    Value: !Ref PublicSubnet1
    Export:
      Name: BlocksUI-Node-PublicSubnet1

  DefaultSecurityGroup:
    Description: 'DefaultSecurityGroup Id'
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: BlocksUI-Node-DefaultSecurityGroup

  NodeSecurityGroup:
    Description: 'NodeSecurityGroup Id'
    Value: !Ref NodeSecurityGroup
    Export:
      Name: BlocksUI-Node-SecurityGroup

  MountTargetSecurityGroup:
    Description: 'MountTargetSecurityGroup Id'
    Value: !Ref MountTargetSecurityGroup
    Export:
      Name: BlocksUI-MountTarget-SecurityGroup
